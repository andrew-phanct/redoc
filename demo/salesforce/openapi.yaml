openapi: 3.1.0
servers:
  - url: //login.salesforce.com/services/data/v52.0
    description: Production server
  - url: //test.salesforce.com/services/data/v52.0
    description: Sandbox server
info:
  description: >
    This is a Salesforce server.

    You can find out more about Salesforce at

    [https://www.salesforce.com](https://www.salesforce.com).


    # Introduction

    This API is documented in **OpenAPI format** and is based on

    Salesforce's RESTful API. It was designed to allow developers to create,
    retrieve, update or delete records, such as accounts, leads, and custom
    objects.


    # OpenAPI Specification

    This API is documented in **OpenAPI format** and is based on

    Salesforce's RESTful API. It provides a powerful, convenient, and simple
    REST-based web services interface for interacting with Salesforce.


    # Cross-Origin Resource Sharing

    This API features Cross-Origin Resource Sharing (CORS) implemented in
    compliance with  [W3C spec](https://www.w3.org/TR/cors/).

    And that allows cross-domain communication from the browser.

    All responses have a wildcard same-origin which makes them completely public
    and accessible to everyone, including any code on any site.


    # Authentication


    Salesforce offers OAuth 2.0 for authentication:

    OAuth2 - an open protocol to allow secure authorization in a simple

    and standard method from web, mobile and desktop applications.


    For Salesforce Authentication with Service-To-Service Integration, which
    requires additional steps and implementation to obtain the JWT Token and use
    it to obtain the Access token.

    Please refer to the [Salesforce
    documentation](https://help.salesforce.com/s/articleView?id=sf.remoteaccess_oauth_jwt_flow.htm&language=en_US&type=5).
  version: 1.0.0
  title: Manabie API Documentation
  termsOfService: http://swagger.io/terms/
    <SecurityDefinitions />
  contact:
    name: API Support
    email: <email_support>
    url: https://github.com/Redocly/redoc
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
    identifier: Apache 2.0
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: https://github.com/Rebilly/generator-openapi-repo
tags:
  - name: Authentication
    description: >
      Salesforce API uses OAuth 2.0 JWT Bearer Token Flow for Server-to-Server
      integration. This authentication method is designed for server-to-server
      scenarios, bypassing user interaction. It allows a client application to
      directly authenticate to the Salesforce server using a digital certificate
      and a JSON Web Token (JWT) assertion.


      The client application first signs a JWT with its private key, then sends
      the signed JWT in a request to the Salesforce server. The server verifies
      the JWT and issues an access token to the client application. The client
      application can then use the access token to authenticate to the
      Salesforce server on behalf of the user or the application itself.


      For generating the JWT Bearer token, please refer to the [Salesforce
      documentation](https://help.salesforce.com/s/articleView?id=sf.remoteaccess_oauth_jwt_flow.htm&language=en_US&type=5)
      for the full implementation.
  - name: Location
    description: >-
      This section pertains to all APIs related to your location data. It may
      include APIs for creating, retrieving, updating, and deleting location
      objects, as well as APIs for querying location data based on specific
      criteria. Each location object may contain details such as coordinates,
      address, and other relevant geographical information.
  - name: Package
    description: Information about a product package within an academic year.
  - name: Course
    description: Information about a course master.
  - name: Order
    description: Operations about Order
  - name: User
    description: Operations about user
  - name: Timesheet
    description: Operations about user
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: Webhooks
    description: Everything about your Webhooks
  - name: CourseModel
    x-displayName: Course
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Course" />
  - name: LocationModel
    x-displayName: Location
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/Location" />
  - name: StudentModel
    x-displayName: Student
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Student" />
  - name: StaffModel
    x-displayName: Staff
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Staff" />
x-tagGroups:
  - name: General
    tags:
      - Authentication
      - pet
      # - store
      - Webhooks
  - name: Master Data API
    tags:
      - Location
      - Package
      - Course
  - name: User Management
    tags:
      - User
  - name: Order Management
    tags:
      - Order
  - name: Timesheet Management
    tags:
      - Timesheet
  - name: Models
    tags:
      - CourseModel
      - LocationModel
      - StudentModel
      - StaffModel
security:
  - {}
paths:
  /services/oauth2/token:
    $ref: paths/auth/services_oauth2_token.yaml
  /services/apexrest/Location/:id:
    $ref: paths/master/location_{location_id}.yaml
  /services/apexrest/Package/:id:
    $ref: paths/master/package_{package_id}.yaml
  /services/apexrest/Course/:id:
    $ref: paths/master/course_{course_id}.yaml
  /services/apexrest/StudentCourseSubscription/:id:
    $ref: paths/order/student_course_subscription_{id}.yaml
  /services/apexrest/Student/:id:
    $ref: paths/user/student_{id}.yaml
  /services/apexrest/Staff/:id:
    $ref: paths/user/staff_{id}.yaml
  /services/apexrest/Timesheet/createTimesheetLessonEntry:
    $ref: paths/timesheet/timesheet_lesson_affiliation.yaml
  /pet:
    $ref: paths/pet.yaml
  /pet/{petId}:
    $ref: paths/pet_{petId}.yaml
  /pet/{petId}/uploadImage:
    $ref: paths/pet_{petId}_uploadImage.yaml
  /pet/findByStatus:
    $ref: paths/pet_findByStatus.yaml
  /pet/findByTags:
    $ref: paths/pet_findByTags.yaml
  /store/inventory:
    $ref: paths/store_inventory.yaml
  /store/order:
    $ref: paths/store_order.yaml
  /store/order/{orderId}:
    $ref: paths/store_order_{orderId}.yaml
  /store/subscribe:
    $ref: paths/store_subscribe.yaml
  /user:
    $ref: paths/user.yaml
  /user/{username}:
    $ref: paths/user_{username}.yaml
  /user/createWithArray:
    $ref: paths/user_createWithArray.yaml
  /user/createWithList:
    $ref: paths/user_createWithList.yaml
  /user/login:
    $ref: paths/user_login.yaml
  /user/logout:
    $ref: paths/user_logout.yaml
components:
  # pathItems:
  #   webhooks:
  #     put:
  #       summary: Get a cat details after update
  #       description: Get a cat details after update
  #       operationId: updatedCat
  #       tags:
  #         - webhooks
  #       requestBody:
  #         description: Information about cat in the system
  #         content:
  #           multipart/form-data:
  #             schema:
  #               $ref: ./components/schemas/Cat.yaml
  #       responses:
  #         '200':
  #           description: update Cat details
  #     post:
  #       summary: Create new cat
  #       description: Info about new cat
  #       operationId: createdCat
  #       tags:
  #         - webhooks
  #       requestBody:
  #         description: Information about cat in the system
  #         content:
  #           multipart/form-data:
  #             schema:
  #               $ref: ./components/schemas/Cat.yaml
  #       responses:
  #         '200':
  #           description: create Cat details
  securitySchemes:
    petstore_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://login.salesforce.com/services/oauth2/authorize
          tokenUrl: https://login.salesforce.com/services/oauth2/token
          scopes:
            full: Full access
            refresh_token: Obtain a refresh token
            offline_access: Offline access

    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: api_key
      in: header
  schemas:
    JWTBearerToken:
      type: object
      properties:
        access_token:
          type: string
          description: The access token string as issued by the authorization server.
        token_type:
          type: string
          description: The type of token this is, typically just the string “Bearer”.
        expires_in:
          type: integer
          description: The time in seconds before the access token becomes invalid.
        scope:
          type: string
          description: The scope of the access token.
        signature:
          type: string
          description: The signature of the access token.
        id_token:
          type: string
          description: The ID token JWT string.
# webhooks:
# newPet:
#   $ref: webhooks/newPet.yaml
# newCat:
#   $ref: webhooks/newCat.yaml
# getCatAfterUpdate:
#    $ref: webhooks/getCatAfterUpdate.yaml
# myWebhook:
#   $ref: '#/components/pathItems/webhooks'
#   description: Overriding description
#   summary: Overriding summary
